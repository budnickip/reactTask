{"version":3,"sources":["components/TableHeader/index.js","components/Loader/index.js","components/TableItem/index.js","components/TableBody/index.js","components/Table/index.js","components/DrawChart/index.js","App.js","index.js"],"names":["TableHeader","className","id","Loader","TableItem","props","curr","code","bid","ask","TableBody","currencies","filter","map","Table","DrawChart","width","height","chartType","loader","data","currenciesOldData","options","chart","title","subtitle","rootProps","App","useState","setCurrencies","lastUpdate","setlastUpdate","lastMonthCurrencies","setLastMonthCurrencies","useEffect","dateNow","getCurrentDate","monthEalier","getMonthEalierDate","fetch","then","res","ok","json","Promise","reject","catch","error","console","fetchData","setInterval","response","currentDateTime","rates","currentdate","Date","minutes","getMinutes","seconds","getSeconds","getHours","convertMonth","getMonth","month","day","getDate","getDay","getFullYear","currentMonth","slice","concat","length","push","item","currency","effectiveDate","forEach","mid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6334be12.chunk.js","sourcesContent":["import './style.scss'\r\n\r\nconst TableHeader = () =>{\r\n    return (\r\n        <thead className=\"table-header\">\r\n            <tr className=\"table-header__row\">\r\n                <th className=\"table-header__item\" id=\"currency-code\">Kod</th>\r\n                <th className=\"table-header__item\" id=\"currency-bid\">Kupno</th>\r\n                <th className=\"table-header__item\" id=\"currency-ask\">Sprzedaż</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import './style.scss';\r\n\r\nconst Loader = () =>{\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import './style.scss'\r\n\r\nconst TableItem = (props) =>{\r\n    return (\r\n        <tr key={props.curr.code} className=\"table-body__row\">\r\n            <td className=\"table-body__item\">{props.curr.code}</td>\r\n            <td className=\"table-body__item\">{props.curr.bid}</td>\r\n            <td className=\"table-body__item\">{props.curr.ask}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableItem","import Loader from '../Loader'\r\nimport TableItem from '../TableItem'\r\nimport './style.scss'\r\n\r\nconst TableBody = (props) =>{\r\n    return (\r\n        <tbody className=\"table-body\">\r\n        {props.currencies ? props.currencies.filter(curr => {\r\n            if(curr.code === 'USD' || curr.code === 'EUR' || curr.code === 'GBP'){\r\n                return true\r\n            }else{\r\n                return false\r\n            }}).map(curr => {\r\n                return <TableItem curr={curr} />\r\n            }) : <Loader />}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody","import './style.scss';\r\nimport TableHeader from '../TableHeader'\r\nimport TableBody from '../TableBody'\r\n\r\nconst Table = (props) =>{\r\n    return (\r\n        <div className=\"table\">\r\n             <table>\r\n                <TableHeader />\r\n                <TableBody currencies={props.currencies} />\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import Chart from \"react-google-charts\";\r\nimport './style.scss'\r\n\r\nconst DrawChart = (props) =>{\r\n    return (\r\n        <div className=\"chart\">\r\n            <Chart\r\n                width={'95%'}\r\n                height={'400px'}\r\n                chartType=\"Line\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={props.currenciesOldData}\r\n                options={{\r\n                    chart: {\r\n                    title: 'Tabela średnich kursów walut',\r\n                    subtitle: 'z ostatniego miesiąca',\r\n                    },\r\n                }}\r\n                rootProps={{ 'data-testid': '3' }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawChart","import { useState, useEffect } from 'react';\nimport './App.scss';\nimport Table from './components/Table'\nimport DrawChart from './components/DrawChart'\n\nfunction App() {\n  const [currencies, setCurrencies] = useState([])\n  const [lastUpdate, setlastUpdate] = useState('')\n  const [lastMonthCurrencies, setLastMonthCurrencies] = useState([])\n  const [currenciesOldData, setcurrenciesOldData] = useState([])\n  //2012-01-31\n  useEffect(()=>{\n    let dateNow = getCurrentDate()\n    let monthEalier = getMonthEalierDate()\n    fetch(`http://api.nbp.pl/api/exchangerates/tables/a/${monthEalier}/${dateNow}/`)\n    .then(res => {\n      if(res.ok){\n        return res.json()\n      }else{\n        return Promise.reject(res)\n      }\n    })\n    .then(res=>{\n      setLastMonthCurrencies(res)\n    })    \n    .catch(error => {\n      console.error(\"Błąd pobrania API!\")\n    })\n  }, [])\n\n  useEffect(() => {\n    fetchData()\n    setInterval(() => {\n      fetchData()\n    }, 10000);\n  }, []);\n\n  const fetchData = () =>{\n    fetch(`http://api.nbp.pl/api/exchangerates/tables/c/`)\n    .then(response =>{\n      if(response.ok){\n          return response.json()\n      } else {\n          return Promise.reject(response)\n      }\n     })\n    .then((response) => {\n      setlastUpdate(currentDateTime)\n      setCurrencies(response[0].rates)\n    })\n    .catch(error => {\n      console.error(\"Błąd pobrania API!\")\n    })\n  }\n\n  const currentDateTime = () =>{\n    let currentdate = new Date(); \n    let minutes = currentdate.getMinutes() < 10 ? '0' + currentdate.getMinutes() : currentdate.getMinutes()\n    let seconds = currentdate.getSeconds() < 10 ? '0' + currentdate.getSeconds() : currentdate.getSeconds()\n    let datetime = `Ostatnia aktualizacja: ${getCurrentDate()} @ ${currentdate.getHours()}:${minutes}:${seconds}`\n    return datetime\n  }\n\n  const getCurrentDate = () =>{\n    let currentdate = new Date()\n    let convertMonth = +currentdate.getMonth() + 1\n    let month = currentdate.getMonth() + 1 < 10 ? '0' + convertMonth : convertMonth\n    let day = currentdate.getDate() < 10 ? '0' + currentdate.getDay() : currentdate.getDay()\n    let date = `${currentdate.getFullYear()}-${month}-${day}`\n    return date\n  }\n\n  const getMonthEalierDate = () =>{\n    let currentdate = getCurrentDate()\n    let currentMonth = +currentdate.slice(5,7)\n    let monthEalier = --currentMonth < 10 ? '0' + currentMonth : currentMonth\n    let monthEalierDate = `${currentdate.slice(0,5).concat(monthEalier).concat(currentdate.slice(7))}`\n    return monthEalierDate\n  }\n// Pobieram wszystkie elementy tablicy i zwracam tablice, gdzie pierwszy element posiada tablice trzech\n// walut (EUR, USD, GBP), a drugi element datę.\n// dzięki temu w prosty sposób mogę zmieniac, które waluty mają być wyświetlane\n  const convertLastMonthCurrencies = () =>{\n    currenciesOldData.length = 0;\n    currenciesOldData.push(['Dzień','EUR','USD','GBP'])\n    lastMonthCurrencies.map(item=>{\n      return [item.rates.filter(currency =>{\n        if(currency.code === 'EUR' || currency.code === 'USD' || currency.code === 'GBP'){\n          return true;\n        }else{\n          return false;\n        }\n      }), item.effectiveDate]\n    }).forEach(currency =>{\n      currenciesOldData.push([currency[1], currency[0][0].mid, currency[0][1].mid, currency[0][2].mid])\n    })\n  }\n\n  useEffect(()=>{\n    convertLastMonthCurrencies()\n  },[lastMonthCurrencies])\n\n\n  return (\n    <div className=\"App\">\n      <p className=\"App__paragraph\">{lastUpdate}</p>\n      <Table currencies={currencies} />\n      <DrawChart currenciesOldData={currenciesOldData} />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}