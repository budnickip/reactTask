{"version":3,"sources":["components/DrawChart/index.js","components/TableHeader/index.js","components/Loader/index.js","components/TableItem/index.js","components/TableBody/index.js","components/Table/index.js","components/Header/index.js","App.js","index.js"],"names":["DrawChart","props","useState","lastMonthCurrencies","setLastMonthCurrencies","currenciesOldData","useEffect","dateNow","getCurrentDate","monthEalier","getMonthEalierDate","fetch","then","res","ok","json","Promise","reject","catch","error","console","currentdate","currentMonth","slice","concat","length","push","map","item","rates","filter","currency","code","effectiveDate","forEach","mid","className","width","height","chartType","loader","data","options","chart","title","subtitle","rootProps","TableHeader","id","Loader","TableItem","curr","bid","ask","TableBody","currencies","Table","Header","lastUpdate","App","setCurrencies","setlastUpdate","fetchData","setInterval","response","currentDateTime","Date","minutes","getMinutes","seconds","getSeconds","getHours","convertMonth","getMonth","month","day","getDate","getDay","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be4b7d35.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nimport Chart from \"react-google-charts\";\r\nimport './style.scss'\r\n\r\nconst DrawChart = (props) =>{\r\n    const [lastMonthCurrencies, setLastMonthCurrencies] = useState([])\r\n    const [currenciesOldData, setcurrenciesOldData] = useState([])\r\n\r\n    useEffect(()=>{\r\n        let dateNow = props.getCurrentDate()\r\n        let monthEalier = getMonthEalierDate()\r\n        fetch(`https://api.nbp.pl/api/exchangerates/tables/a/${monthEalier}/${dateNow}/`)\r\n        .then(res => {\r\n          if(res.ok){\r\n            return res.json()\r\n          }else{\r\n            return Promise.reject(res)\r\n          }\r\n        })\r\n        .then(res=>{\r\n          setLastMonthCurrencies(res)\r\n        })    \r\n        .catch(error => {\r\n          console.error(\"Błąd pobrania API!\")\r\n        })\r\n      }, []) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n      const getMonthEalierDate = () =>{\r\n        let currentdate = props.getCurrentDate()\r\n        let currentMonth = +currentdate.slice(5,7)\r\n        let monthEalier = --currentMonth < 10 ? '0' + currentMonth : currentMonth\r\n        let monthEalierDate = `${currentdate.slice(0,5).concat(monthEalier).concat(currentdate.slice(7))}`\r\n        return monthEalierDate\r\n      }\r\n\r\n      // Pobieram wszystkie elementy tablicy i zwracam tablice, gdzie pierwszy element posiada tablice trzech\r\n    // walut (EUR, USD, GBP), a drugi element datę.\r\n    // dzięki temu w prosty sposób mogę zmieniac, które waluty mają być wyświetlane\r\n    const convertLastMonthCurrencies = () =>{\r\n        currenciesOldData.length = 0;\r\n        currenciesOldData.push(['Dzień','EUR','USD','GBP'])\r\n        lastMonthCurrencies.map(item=>{\r\n        return [item.rates.filter(currency =>{\r\n            if(currency.code === 'EUR' || currency.code === 'USD' || currency.code === 'GBP'){\r\n            return true;\r\n            }else{\r\n            return false;\r\n            }\r\n        }), item.effectiveDate]\r\n        }).forEach(currency =>{\r\n        currenciesOldData.push([currency[1], currency[0][0].mid, currency[0][1].mid, currency[0][2].mid])\r\n        })\r\n    }\r\n    \r\n    \r\n    useEffect(()=>{\r\n        convertLastMonthCurrencies()\r\n    },[lastMonthCurrencies]) // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n            <Chart\r\n                width={'95%'}\r\n                height={'400px'}\r\n                chartType=\"Line\"\r\n                loader={<div>Loading Chart</div>}\r\n                data={currenciesOldData}\r\n                options={{\r\n                    chart: {\r\n                    title: 'Wykres średnich kursów walut',\r\n                    subtitle: 'z ostatniego miesiąca',\r\n                    },\r\n                }}\r\n                rootProps={{ 'data-testid': '3' }}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DrawChart","import './style.scss'\r\n\r\nconst TableHeader = () =>{\r\n    return (\r\n        <thead className=\"table-header\">\r\n            <tr className=\"table-header__row\">\r\n                <th className=\"table-header__item\" id=\"currency-code\">Kod</th>\r\n                <th className=\"table-header__item\" id=\"currency-bid\">Kupno</th>\r\n                <th className=\"table-header__item\" id=\"currency-ask\">Sprzedaż</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHeader","import './style.scss';\r\n\r\nconst Loader = () =>{\r\n    return (\r\n        <div className=\"lds-ring\">\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","import './style.scss'\r\n\r\nconst TableItem = (props) =>{\r\n    return (\r\n        <tr key={props.curr.code} className=\"table-body__row\">\r\n            <td className=\"table-body__item\">{props.curr.code}</td>\r\n            <td className=\"table-body__item\">{props.curr.bid}</td>\r\n            <td className=\"table-body__item\">{props.curr.ask}</td>\r\n        </tr>\r\n    )\r\n}\r\n\r\nexport default TableItem","import Loader from '../Loader'\r\nimport TableItem from '../TableItem'\r\nimport './style.scss'\r\n\r\nconst TableBody = (props) =>{\r\n    return (\r\n        <tbody className=\"table-body\">\r\n        {props.currencies ? props.currencies.filter(curr => {\r\n            if(curr.code === 'USD' || curr.code === 'EUR' || curr.code === 'GBP'){\r\n                return true\r\n            }else{\r\n                return false\r\n            }}).map(curr => {\r\n                return <TableItem key={curr.code} curr={curr} />\r\n            }) : <Loader />}\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody","import './style.scss';\r\nimport TableHeader from '../TableHeader'\r\nimport TableBody from '../TableBody'\r\n\r\nconst Table = (props) =>{\r\n    return (\r\n        <div className=\"table\">\r\n             <table>\r\n                <TableHeader />\r\n                <TableBody currencies={props.currencies} />\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table","import Table from '../Table'\r\nimport './style.scss'\r\n\r\nconst Header = (props) =>{\r\n    return(\r\n        <div className=\"header\">\r\n            <p className=\"header__paragraph\">{props.lastUpdate}</p>\r\n            <Table currencies={props.currencies} />\r\n        </div>\r\n    )\r\n}\r\nexport default Header","import { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport DrawChart from './components/DrawChart'\r\nimport Header from './components/Header'\r\n\r\nfunction App() {\r\n  const [currencies, setCurrencies] = useState([])\r\n  const [lastUpdate, setlastUpdate] = useState('')\r\n\r\n  useEffect(() => {\r\n    fetchData()\r\n    setInterval(() => {\r\n      fetchData()\r\n    }, 10000);\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  const fetchData = () =>{\r\n    fetch(`https://api.nbp.pl/api/exchangerates/tables/c/`)\r\n    .then(response =>{\r\n      if(response.ok){\r\n          return response.json()\r\n      } else {\r\n          return Promise.reject(response)\r\n      }\r\n     })\r\n    .then((response) => {\r\n      setlastUpdate(currentDateTime)\r\n      setCurrencies(response[0].rates)\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Błąd pobrania API!\")\r\n    })\r\n  }\r\n\r\n  const currentDateTime = () =>{\r\n    let currentdate = new Date(); \r\n    let minutes = currentdate.getMinutes() < 10 ? '0' + currentdate.getMinutes() : currentdate.getMinutes()\r\n    let seconds = currentdate.getSeconds() < 10 ? '0' + currentdate.getSeconds() : currentdate.getSeconds()\r\n    let datetime = `Ostatnia aktualizacja: ${getCurrentDate()} @ ${currentdate.getHours()}:${minutes}:${seconds}`\r\n    return datetime\r\n  }\r\n\r\n  const getCurrentDate = () =>{\r\n    let currentdate = new Date()\r\n    let convertMonth = +currentdate.getMonth() + 1\r\n    let month = currentdate.getMonth() + 1 < 10 ? '0' + convertMonth : convertMonth\r\n    let day = currentdate.getDate() < 10 ? '0' + currentdate.getDay() : currentdate.getDay()\r\n    let date = `${currentdate.getFullYear()}-${month}-${day}`\r\n    return date\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header lastUpdate={lastUpdate} currencies={currencies} />\r\n      <DrawChart getCurrentDate={getCurrentDate} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}